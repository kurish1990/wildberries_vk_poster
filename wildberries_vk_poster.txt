import requests
import logging
from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from contextlib import contextmanager
import time
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VK API
VK_GROUP_ID = "222086696"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
VK_ACCESS_TOKEN = "vk1.a.FQmWVmoh9CRP1J0VRON_gyCfWTivK0CCMLVX0ewBfB4bmm-rfL_Nzq0rjxdaWSyP5MWEbxyVNBXd_dS5Vo91jc4x8G2SckxP94zGhlUsvbrxY0lQKbF4M6_jYCtmrjJxarCTxOX4ubsNdZGofOsinpAPFccr6WNeowqYpz_ymdqq6o0OUqZY77pOA0MDhx5NcVcR0aaOFDJWN0x5GBuoPQ"
VK_API_VERSION = "5.131"

# URL Wildberries
URL = "https://www.wildberries.ru/"

@contextmanager
def get_webdriver(service_path):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebDriver."""
    service = Service(service_path)
    options = webdriver.EdgeOptions()
    options.add_argument("start-maximized")
    options.add_argument("high-dpi-support=1")
    options.add_argument("force-device-scale-factor=2.0")
    driver = webdriver.Edge(service=service, options=options)
    try:
        yield driver
    finally:
        driver.quit()

def fetch_url_with_retries(url, retries=3, delay=2):
    """–ó–∞–≥—Ä—É–∑–∫–∞ URL —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏."""
    for attempt in range(retries):
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return response
        except requests.RequestException as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            time.sleep(delay)
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")

def save_element_screenshot(element, file_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
    try:
        element.screenshot(file_path)
        logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
        return file_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
        return None

def scrape_wildberries(category_url=None, max_products=10, driver_path=None, post_interval=300):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å Wildberries.
    :param category_url: URL –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Wildberries.
    :param max_products: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.
    :param driver_path: –ü—É—Ç—å –∫ WebDriver.
    :param post_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    :return: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    products = []
    target_url = category_url if category_url else URL

    with get_webdriver(driver_path) as driver:
        driver.get(target_url)
        try:
            product_cards = WebDriverWait(driver, 20).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".product-card__link"))
            )

            for index, card in enumerate(product_cards[:max_products]):
                try:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {index + 1}/{max_products}...")
                    product_link = card.get_attribute('href')

                    if not product_link:
                        logger.warning(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {index + 1} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue

                    driver.execute_script("window.open(arguments[0]);", product_link)
                    driver.switch_to.window(driver.window_handles[-1])

                    WebDriverWait(driver, 20).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, ".product-page__title"))
                    )

                    title = driver.find_element(By.CSS_SELECTOR, ".product-page__title").text.strip()

                    try:
                        price_element = WebDriverWait(driver, 20).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, ".price-block__wallet-price.red-price"))
                        )
                        raw_price = price_element.get_attribute("innerText").strip()
                        price = raw_price.replace("\u00a0", "").replace("‚ÇΩ", "").strip()
                    except Exception:
                        price = "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

                    image_element = driver.find_element(By.CSS_SELECTOR, ".slide__content img")
                    high_quality_image = image_element.get_attribute("src").replace('small', 'ultra')

                    image_screenshot_path = save_element_screenshot(image_element, f"image_screenshot_{index + 1}.png")

                    product = {
                        "title": title,
                        "price": price,
                        "link": product_link,
                        "image": high_quality_image,
                        "screenshot": image_screenshot_path
                    }
                    products.append(product)

                    post_to_vk(product)

                    if index < max_products - 1:
                        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {post_interval} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞...")
                        time.sleep(post_interval)

                    driver.close()
                    driver.switch_to.window(driver.window_handles[0])

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {index + 1}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

    return products

def post_to_vk(product):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –≤ –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ."""
    try:
        upload_url = requests.post(
            f"https://api.vk.com/method/photos.getWallUploadServer",
            params={
                "group_id": VK_GROUP_ID,
                "access_token": VK_ACCESS_TOKEN,
                "v": VK_API_VERSION
            }
        ).json()["response"]["upload_url"]

        headers = {"User-Agent": "Mozilla/5.0"}

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        image_data = fetch_url_with_retries(product["image"]).content
        upload_response = requests.post(upload_url, files={"photo": ("image.jpg", image_data)}).json()

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot_data = open(product["screenshot"], "rb")
        screenshot_response = requests.post(upload_url, files={"photo": ("screenshot.png", screenshot_data)}).json()

        save_response = requests.post(
            f"https://api.vk.com/method/photos.saveWallPhoto",
            params={
                "group_id": VK_GROUP_ID,
                "photo": upload_response["photo"],
                "server": upload_response["server"],
                "hash": upload_response["hash"],
                "access_token": VK_ACCESS_TOKEN,
                "v": VK_API_VERSION
            }
        ).json()

        photo_id = save_response["response"][0]["id"]
        owner_id = save_response["response"][0]["owner_id"]

        message = (f"üõí **{product['title']}**\n"
                   f"üè∑Ô∏è –¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
                   f"{product['link']}\n\n"
                   f"_–¶–µ–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ._")

        requests.post(
            f"https://api.vk.com/method/wall.post",
            params={
                "owner_id": f"-{VK_GROUP_ID}",
                "from_group": 1,
                "message": message,
                "attachments": f"photo{owner_id}_{photo_id}",
                "access_token": VK_ACCESS_TOKEN,
                "v": VK_API_VERSION
            }
        )

        logger.info(f"–¢–æ–≤–∞—Ä '{product['title']}' —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {e}")

if __name__ == "__main__":
    driver_path = r"C:\\Users\\kuris\\Documents\\wildberries_vk\\msedgedriver.exe"
    categories = [
        "https://www.wildberries.ru/catalog/0/search.aspx?search=%D0%B4%D0%BE%20300%20%D1%80%D1%83%D0%B1%D0%BB%D0%B5%D0%B9%20%D1%82%D0%BE%D0%B2%D0%B0%D1%80%D1%8B",
    ]
    for category in categories:
        scrape_wildberries(category_url=category, max_products=4, driver_path=driver_path, post_interval=300)
